apiVersion: v1
data:
  upgrade.yaml: |-
    "apiVersion": "console.openshift.io/v1"
    "kind": "ConsoleNotification"
    "metadata":
      "annotations": {}
      "labels":
        "name": "upgrade"
      "name": "upgrade"
    "spec":
      "backgroundColor": "#2596be"
      "color": "#fff"
      "link":
        "href": "https://kb.vshn.ch/oc4/references/release_notes.html"
        "text": "release notes"
      "location": "BannerTop"
      "text": "Cluster will be upgraded to OpenShift $OCP_VERSION in the maintenance window at $NEXT_MAINTENANCE"
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    name: upgrade-notification-template
  name: upgrade-notification-template
  namespace: openshift-console
---
apiVersion: v1
data:
  create-console-notification.sh: |
    #!/bin/bash
    set -euo pipefail

    echo "OVERLAY_DATE: $OVERLAY_DATE"
    echo "OVERLAY_CHANNEL: $OVERLAY_CHANNEL"
    echo "OVERLAY_VERSION: $OVERLAY_VERSION"
    echo "OVERLAY_VERSION_MINOR: $OVERLAY_VERSION_MINOR"

    export NEXT_MAINTENANCE=$(kubectl -n appuio-openshift-upgrade-controller get upgradeconfigs -oyaml | yq '[.items[].status.nextPossibleSchedules[].time | from_yaml | select(. > env(OVERLAY_DATE))][0] | tz("Europe/Zurich") | format_datetime("02.01.2006 15:04")')
    test -n "${NEXT_MAINTENANCE:-}" || (echo "No valid maintenance window found" && exit 1)
    echo "NEXT_MAINTENANCE: $NEXT_MAINTENANCE"

    yq '(.. | select(tag == "!!str")) |= envsubst' template/upgrade.yaml > notification.yaml
    cat notification.yaml

    CURRENT_MINOR=$(oc version -oyaml | yq '.openshiftVersion' | cut -d'.' -f2)
    if (( OVERLAY_VERSION_MINOR > CURRENT_MINOR )); then
        echo "Creating console notification:"
        kubectl apply -f notification.yaml
    else
        echo "Current OpenShift minor version matches channel overlay version."
    fi
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    name: console-notification-script
  name: console-notification-script
  namespace: openshift-console
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
  labels:
    name: create-upgrade-notification
  name: create-upgrade-notification
  namespace: openshift-console
spec:
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        name: create-upgrade-notification
    spec:
      containers:
        - args: []
          command:
            - /scripts/create-console-notification.sh
          env:
            - name: OVERLAY_CHANNEL
              value: stable-4.16
            - name: OVERLAY_DATE
              value: '2025-01-01T12:00:00Z'
            - name: OVERLAY_VERSION
              value: '4.16'
            - name: OVERLAY_VERSION_MINOR
              value: '16'
          image: quay.io/appuio/oc:v4.15
          imagePullPolicy: Always
          name: create-console-notification
          ports: []
          stdin: false
          tty: false
          volumeMounts:
            - mountPath: /export
              name: export
            - mountPath: /scripts
              name: scripts
            - mountPath: export/template
              name: upgrade-notification-template
              readOnly: true
          workingDir: /export
      imagePullSecrets: []
      initContainers: []
      restartPolicy: OnFailure
      serviceAccountName: notification-manager
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: {}
          name: export
        - configMap:
            defaultMode: 360
            name: console-notification-script
          name: scripts
        - configMap:
            defaultMode: 360
            name: upgrade-notification-template
          name: upgrade-notification-template
---
apiVersion: v1
data:
  cleanup-upgrade-notification.sh: |
    #!/bin/bash
    set -euo pipefail

    echo "OVERLAY_VERSION_MINOR: $OVERLAY_VERSION_MINOR"
    # NOTE(sg): We use 4.0.0 as fallback current version since we only care that
    # the current minor is less than the overlay minor for no-op upgrades.
    export CURRENT_VERSION=${JOB_spec_desiredVersion_version:-"4.0.0"}
    CURRENT_MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
    echo "CURRENT_MINOR: $CURRENT_MINOR (0 is expected for no-op jobs)"

    if (( OVERLAY_VERSION_MINOR > CURRENT_MINOR )); then
        echo "Minor upgrade still pending. Nothing to clean up."
    else
        echo "Deleting upgrade console notification"
        kubectl delete consolenotifications upgrade
    fi
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    name: cleanup-upgrade-notification
  name: cleanup-upgrade-notification
  namespace: appuio-openshift-upgrade-controller
---
apiVersion: managedupgrade.appuio.io/v1beta1
kind: UpgradeJobHook
metadata:
  annotations: {}
  labels:
    name: cleanup-upgrade-notification
  name: cleanup-upgrade-notification
  namespace: appuio-openshift-upgrade-controller
spec:
  events:
    - Finish
  selector:
    matchLabels:
      appuio-managed-upgrade: 'true'
  template:
    spec:
      template:
        spec:
          containers:
            - args: []
              command:
                - /usr/local/bin/cleanup
              env:
                - name: OVERLAY_VERSION
                  value: '16'
              image: quay.io/appuio/oc:v4.15
              imagePullPolicy: IfNotPresent
              name: cleanup
              ports: []
              stdin: false
              tty: false
              volumeMounts:
                - mountPath: /usr/local/bin/cleanup
                  name: scripts
          restartPolicy: Never
          serviceAccountName: notification-manager
          volumes:
            - configMap:
                defaultMode: 360
                name: cleanup-upgrade-notification
              name: scripts
